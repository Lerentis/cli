//go:build ignore

package main

import (
	"fmt"
	"html/template"
	"os"
	"strings"
)

type Args struct {
	Source       string
	SourceMunged string
}

func main() {
	fmt.Printf("Running %s go on %s\n", os.Args[0], os.Getenv("GOFILE"))

	cwd, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	fmt.Printf("  cwd = %s\n", cwd)
	fmt.Printf("  os.Args = %#v\n", os.Args)

	for _, ev := range []string{"GOARCH", "GOOS", "GOFILE", "GOLINE", "GOPACKAGE", "DOLLAR"} {
		fmt.Println("  ", ev, "=", os.Getenv(ev))
	}

	if len(os.Args) < 2 {
		panic("Missing argument, aborting")
	}

	args := Args{
		Source:       os.Args[1],
		SourceMunged: strings.ReplaceAll(os.Args[1], "-", ""),
	}

	funcMap := template.FuncMap{
		"Title": strings.Title,
	}

	template := template.New("simple").Funcs(funcMap)
	template, err = template.Parse(`// Code generated by "extractmaps {{.Source}}"; DO NOT EDIT

package datamaps

import "github.com/overmindtech/sdp-go"

var {{.SourceMunged | Title }}Data = map[string]TfMapData{
	"aws_autoscaling_group": {
		Type:       "autoscaling-auto-scaling-group",
		Method:     sdp.QueryMethod_GET,
		QueryField: "name",
		Scope:      "*",
	},
	"aws_iam_policy": {
		Type:       "iam-policy",
		Method:     sdp.QueryMethod_LIST,
		QueryField: "arn",
		Scope:      "*",
	},
	"aws_iam_role_policy_attachment": {
		Type:       "iam-policy",
		Method:     sdp.QueryMethod_LIST,
		QueryField: "policy_arn",
		Scope:      "*",
	},
	"aws_iam_user_policy_attachment": {
		Type:       "iam-policy",
		Method:     sdp.QueryMethod_LIST,
		QueryField: "policy_arn",
		Scope:      "*",
	},
}
`)
	if err != nil {
		panic(err)
	}

	f, err := os.Create(fmt.Sprintf("%v.go", strings.ToLower(args.SourceMunged)))
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Printf("Generating handler for %v\n", args)
	err = template.Execute(f, args)
	if err != nil {
		panic(err)
	}
}
